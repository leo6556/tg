from telegram import Update
from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup

from telegram.ext import Updater
from telegram.ext import CallbackContext
from telegram.ext import MessageHandler
from telegram.ext import ConversationHandler
from telegram.ext import CommandHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler
import time

from pprint import pprint
import httplib2
import apiclient
from oauth2client.service_account import ServiceAccountCredentials

import sqlite3 as sq
import create_database as dtb

import random
CRED_FILE = 'creds.json'
spreadsheets_id = '1DjGp4T1w_ChKieeLKbrNJVFkP6MTwlBbSHiT5u6zeik'

credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CRED_FILE,
    [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http = httpAuth)

DATE, POINT, END, TIME, FINAL_CHECK, CHAT = 0,1,2,4, 5, 6


def echo(update: Update, context: CallbackContext):

    if update.effective_message.text == '/sighup':
        update.message.reply_text('–í—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –≤—ã—à–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ üëÜüèº'
                                  ' –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ'
                                  )
        return


    update.message.reply_text(text='–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É üëâüèº "/start"')

def start(update: Update, context: CallbackContext):

    name = update.message.chat.full_name


    text = [
        f'*–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫*, {name} ü§ó',
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã *'Beauty Girls'!*  ",
        '',
        '–ë—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ –º–∏–Ω—É—Ç—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É ü§ì',
        '',

        '*–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é* (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ //–∫–æ–º–∞–Ω–¥—É):',
        '',
        'üñå /sigh_up -- –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º',
        '',
        'üíµ /price -- —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏',
        '',
        "üìã /my_orders -- –º–æ–∏ –∑–∞–∫–∞–∑—ã",
        '',
        "ü§ù /help -- –ø–æ–º–æ—â—å"

    ]

    update.message.reply_text(text='\n'.join(text),
                              parse_mode=ParseMode.MARKDOWN)


def markup_base():
    keyboard = [
        [
            InlineKeyboardButton('–°—Ç—Ä–∏–∂–∫–∞ üíáüèº‚Äç‚ôÄÔ∏è', callback_data='haircut'),
            InlineKeyboardButton('–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ üë©üèº‚Äçü¶∞', callback_data='hair')
        ],
        [
            InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä üíÖüèº', callback_data='manicure'),
            InlineKeyboardButton('–ü–µ–¥–∏–∫—é—Ä üë£', callback_data='pedicure')
        ],
        [
            InlineKeyboardButton('–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º üíÜüèº‚Äç‚ôÄÔ∏è', callback_data='face')
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

def markup_base2():
    keyboard = [
        [
            InlineKeyboardButton('–°—Ç—Ä–∏–∂–∫–∞', callback_data='haircut2'),
            InlineKeyboardButton('–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', callback_data='hair2')
        ],
        [
            InlineKeyboardButton('–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º', callback_data='face2'),
            InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä', callback_data='manicure2')
        ],
        # [
        #     InlineKeyboardButton('–ü–µ–¥–∏–∫—é—Ä', callback_data='pedicure2')
        # ],
        [
            InlineKeyboardButton('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='stop')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def markupDate():
    b = time.asctime()
    c = int(b[7:10])
    k = b[4:7]

    values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheets_id,
        range='A2:A32',
        majorDimension='COLUMNS').execute()  # –≤–º–µ—Å—Ç–æ rows –º–æ–∂–Ω–æ COLUMNS
    # pprint(values['values'][0])

    f = values['values'][0].index(str(c))
    # print(f)
    # print(c)

    month = {'Sep':'—Å–µ–Ω', 'Oct':'–æ–∫—Ç', 'Nov':'–Ω–æ—è–±', 'Dec':'–¥–µ–∫', 'Jan':'—è–Ω–≤', 'Feb':'—Ñ–µ–≤', 'Mar':'–º–∞—Ä','Apr':'–∞–ø—Ä', 'May':'–º–∞—è', 'Jun':'–∏—é–Ω',
             'Jul':'–∏—é–ª','Aug':'–∞–≤–≥'}
    month2 = {'Sep': '–æ–∫—Ç', 'Oct': '–Ω–æ—è–±', 'Nov': '–¥–µ–∫', 'Dec': '—è–Ω–≤', 'Jan': '—Ñ–µ–≤', 'Feb': '–º–∞—Ä', 'Mar': '–∞–ø—Ä',
             'Apr': '–º–∞—è', 'May': '–∏—é–Ω', 'Jun': '–∏—é–ª',
             'Jul': '–∞–≤–≥', 'Aug': '—Å–µ–Ω'}

    if c <= 23:
        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'date{b}') for b in values['values'][0][c:c + 4]
            ],
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'date{b}') for b in values['values'][0][c + 4:c + 8]
            ],
            [
                InlineKeyboardButton('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='stop')
            ],


        ]
    elif c >= 27:

        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'{b}') for b in values['values'][0][c:]

            ],
            [
                InlineKeyboardButton(f"{p} {month2[k]}", callback_data=f'{b}') for p in values['values'][0][:4]
            ],
            [
                InlineKeyboardButton('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='stop')
            ],

        ]
    else:

        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'{b}') for b in values['values'][0][c:c+4]

            ],
            [
                InlineKeyboardButton(f"{p} {month2[k]}", callback_data=f'{p}') for p in values['values'][0][c+6:]
            ],
            [
                InlineKeyboardButton('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='stop')
            ],
        ]


    return InlineKeyboardMarkup(keyboard)

def markup_back():
    keyboard = [
        [
            InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def markup_YN():
     keyboard = [
         [
             InlineKeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ', callback_data='ok'),
             InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='revoke'),
             InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='restart')
         ]
     ]
     return InlineKeyboardMarkup(keyboard)

def markup_YN2():

    keyboard = [
        [
            InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete'),
            InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='nomore2')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def markup_orders():
    keyboard = [
        [
            InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data='more'),
            InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='stopit')
        ]

    ]
    return InlineKeyboardMarkup(keyboard)

def markup_orders2():
    keyboard = [
        [
            InlineKeyboardButton('C–∫—Ä—ã—Ç—å', callback_data='nomore'),
            InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='stopit')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)



def price_list(update: Update, context: CallbackContext):
    update.message.reply_text('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä',
                              reply_markup=markup_base())

def callback(update:Update, context:CallbackContext):

    query = update.callback_query
    data_1 = query.data

    callback_1_list = ['haircut', 'hair', 'manicure', 'pedicure', 'back', 'face']

    while data_1 in callback_1_list:
        if data_1 == 'haircut':

            query.edit_message_text('''
                *–£—Å–ª—É–≥–∏ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä–∞* üíáüèº‚Äç‚ôÄÔ∏è
üíàÔ∏è –°—Ç—Ä–∏–∂–∫–∞ -- 2400,
üíàÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ–ª–∫–∏ -- 800,
üíàÔ∏è –ü–æ–¥—Ä–æ–≤–Ω—è—Ç—å –∫–æ–Ω—á–∏–∫–∏ -- 1200,
üíàÔ∏è –ú–æ–¥–µ–ª—å–Ω–∞—è —É–∫–ª–∞–¥–∫–∞ -- 1800
        ''',
                                    reply_markup=markup_back(),
                                    parse_mode=ParseMode.MARKDOWN)
        elif data_1 == 'back':
            query.edit_message_text('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä',
                                    reply_markup=markup_base())
        elif data_1 == 'hair':
            query.edit_message_text('''
                *–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ* üë©üèº‚Äçü¶∞
üíàÔ∏è –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω —Ç–æ–Ω -- 4500,
üíàÔ∏è –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π -- 3200,
üíàÔ∏è –¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -- 2000''',
                                    reply_markup=markup_back(),
                                    parse_mode=ParseMode.MARKDOWN)
        elif data_1 == 'face':
            query.edit_message_text('''
                *–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º* üíÜüèº‚Äç‚ôÄÔ∏è
üíàÔ∏è –ú–µ—Ö–∞–Ω-–∞—è —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞ -- 3200,
üíàÔ∏è –í–∞–∫-–∞—è —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞ antiage -- 4200
üíàÔ∏è –£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –ø–∏–ª–∏–Ω–≥ -- 1800,
''',
                                    reply_markup=markup_back(),
                                    parse_mode=ParseMode.MARKDOWN)
        elif data_1 == 'manicure':
            query.edit_message_text('''
                *–ú–∞–Ω–∏–∫—é—Ä* üíÖüèº
üíà –ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–∫–µ—Å–∫–∏–π - 850,
üíà –ú–∞–Ω–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π -- 1250,
üíà –ü–æ–∫—Ä—ã—Ç–∏–µ - 900,
üíà –°–Ω—è—Ç–∏–µ - 150''',
                                    reply_markup=markup_back(),
                                    parse_mode=ParseMode.MARKDOWN)
        elif data_1 == 'pedicure':
            query.edit_message_text('''
                *–ü–µ–¥–∏–∫—é—Ä* üë£
üíà –ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π -- 1600,
üíà –ü–µ–¥–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π -- 1800,
''',
                                    reply_markup=markup_back(),
                                    parse_mode=ParseMode.MARKDOWN)

    if data_1 == 'more':

        true_text = update.effective_message.text
        query.edit_message_text(text=f'{true_text}\n'
                                     f'üìç–ê–¥—Ä–µ—Å: —É–ª. –§–∞–¥–µ–µ–≤–∞, 32\n'
                                     f'üìç–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å 10:00 –¥–æ 20:00\n'
                                     f'üìç–°–≤—è–∑—å: (383) 263-16-19',
                                reply_markup=markup_orders2())
    elif data_1 == 'nomore':
        true_text = update.effective_message.text
        query.edit_message_text(text=true_text[:-78],
                                reply_markup=markup_orders())

    elif data_1 == 'stopit':
        true_text = update.effective_message.text
        query.edit_message_text(text=f'{true_text[:63]}\n\n*–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?ü§î*',
                                reply_markup=markup_YN2(),
                                parse_mode=ParseMode.MARKDOWN)
    elif data_1 == 'nomore2':
        true_text = update.effective_message.text
        query.edit_message_text(text=true_text[:56], reply_markup=markup_orders())

    elif data_1 == 'delete':

        true_text = update.effective_message.text

        #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞—Ç—É, –≤—Ä–µ–º—è   –∏ –∫–ª—é—á–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        num_ord = true_text[15:19]
        D = int(true_text[27:29])
        T = true_text[58:60]
        print(T)


        query.edit_message_text('–ó–∞–∫–∞–∑ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω üòå')

        with sq.connect('client_orders.db') as con:

            chat_id = update.effective_message.chat_id

            cur = con.cursor()

            cur.execute(f'DELETE FROM orders WHERE random LIKE {num_ord}')
            result = cur.fetchall()
            print(result)



        #–í–Ω–µ—Å—Ç–∏ UPDATE in googlesheets

        dict_time = {'08':'B','09':'C','10':'D','11':'E','12':'F','13':'G'}


        values = service.spreadsheets().values().batchUpdate(
            spreadsheetId=spreadsheets_id,
            body={
                'valueInputOption': 'USER_ENTERED',
                'data': [
                    {'range': f'{dict_time[T]}{int(D)+1}',
                     'majorDimension': 'COLUMNS',
                     'values': [['–¥–∞']]},

                ]
            }
        ).execute()



def my_orders(update:Update, context:CallbackContext):

    chatid_data = update.message.chat_id

    # –ü–æ–¥–∫–ª–¥—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ GOOGLE SHEET

    with sq.connect('client_orders.db') as con:
        cur = con.cursor()

        cur.execute(f'SELECT text FROM orders WHERE {chatid_data}=chat_id')
        result = cur.fetchall()


        # –û—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç

        if len(result) > 0:
            for i in range(len(result)):
                update.message.reply_text(text=result[i][0],
                                          reply_markup=markup_orders())
        else:
            update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.')

def help(update:Update, context:CallbackContext):
    update.message.reply_text(''' 
üìç –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /sighup, /price,   
/myordedrs, /help
üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ: –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –ø—Ä—è–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É (–æ–Ω–∞ –≤—ã–¥–µ–ª–µ—è–µ—Ç—Å—è —Å–∏–Ω–∏–º
 —à—Ä–∏—Ñ—Ç–æ–º) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
üìç –ü–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç: @admin_tg
''',
                             )



def start_conv(update:Update, context:CallbackContext):

    update.message.reply_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É üíÅ‚Äç‚ôÄÔ∏è',
        reply_markup=markup_base2()
    )

    return POINT

def date_han(update:Update, context:CallbackContext):

    point = update.callback_query.data
    # print(point)

    if point == 'stop':
        update.callback_query.edit_message_text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ üòå')
        return ConversationHandler.END

    #–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø—É—Ç—ã–≤–∞–Ω–∏—è callback-–æ–≤
    list_callback1 = ['haircut','hair', 'pedicure', 'manicure', 'face', 'back', 'more', 'nomore',
                      'stopit', 'nomore2', 'delete']
    while point in list_callback1:
        callback(update=update, context=context)


#–ï—Å–ª–∏ –ö–û–ù–ß–ò–õ–û–°–¨ –°–í–û–ë–û–î–ù–û–ï –í–†–ï–ú–Ø –í–û–ó–í–†–ê–©–ê–ï–¢ –ö –í–´–ë–û–†–£ –î–†–£–ì–û–ô –î–ê–¢–´
    if point == 'another':

        # chat_id = update.callback_query.message.chat_id

        update.callback_query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π—Ü –¥–ª—è –≤–∞—Å –¥–µ–Ω—å üìÜ',
            reply_markup=markupDate()
        )
        return TIME


    context.user_data[POINT] = point


    update.callback_query.edit_message_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π—Ü –¥–ª—è –≤–∞—Å –¥–µ–Ω—å üìÜ',
        reply_markup=markupDate()
    )
    return TIME

def time_han(update:Update, context:CallbackContext):
    callback_data = update.callback_query.data
    # print(callback_data)
    context.user_data[DATE] = callback_data

    if callback_data == 'stop':
        update.callback_query.edit_message_text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ üòå')
        return ConversationHandler.END

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø—É—Ç—ã–≤–∞–Ω–∏—è callback-–æ–≤
    list_callback1 = ['haircut','hair', 'pedicure', 'manicure', 'face', 'back', 'more', 'nomore',
                      'stopit', 'nomore2', 'delete']

    while callback_data in list_callback1:
        callback(update=update, context=context)

    c = int(callback_data[-2:])
    RANGE = f'A{c+1}:G{c+1}'

    valuesYN = service.spreadsheets().values().get(
        spreadsheetId=spreadsheets_id,
        range=f'A{c+1}:G{c+1}',
        majorDimension='ROWS').execute()  # –≤–º–µ—Å—Ç–æ rows –º–æ–∂–Ω–æ COLUMNS

    newvaluesYN = valuesYN['values'][0][1:]


    valuesTIME = service.spreadsheets().values().get(
        spreadsheetId=spreadsheets_id,
        range='B1:G1',
        majorDimension='ROWS').execute()  # –≤–º–µ—Å—Ç–æ rows –º–æ–∂–Ω–æ COLUMNS

    newvaluesTIME = valuesTIME['values'][0]

    list_time = []

    while len(newvaluesYN) > 0:
        if newvaluesYN[-1:][0] == '–¥–∞':
            list_time.append(newvaluesTIME[-1])

            newvaluesTIME = newvaluesTIME[:-1]
            newvaluesYN = newvaluesYN[:-1]

            # print(list_time)
        else:
            newvaluesTIME = newvaluesTIME[:-1]
            newvaluesYN = newvaluesYN[:-1]

    list_time = list_time[::-1]

    # –ï—Å–ª–∏ –ö–û–ù–ß–ò–õ–û–°–¨ –°–í–û–ë–û–î–ù–û–ï –í–†–ï–ú–Ø –í–û–ó–í–†–ê–©–ê–ï–¢ –ö –í–´–ë–û–†–£ –î–†–£–ì–û–ô –î–ê–¢–´
    if len(list_time) == 0:

        mark = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å', callback_data='another')
                ]
            ]
        )
        update.callback_query.edit_message_text(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—á–∏–ª–æ—Å—å',
            reply_markup=mark
        )
        return POINT


    markup = InlineKeyboardMarkup(
        inline_keyboard= [
            [
                InlineKeyboardButton(f'{i}', callback_data=f'time{i[:2]}') for i in list_time
            ],
            [
                InlineKeyboardButton('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='stop')
            ],
        ]
    )


    update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ  –≤—Ä–µ–º—è üïì',
                                           reply_markup=markup)

    return FINAL_CHECK

def final_check(update:Update, context:CallbackContext):

    callback_data = update.callback_query.data
    # print(callback_data)
    context.user_data[TIME] = callback_data[-2:]

    if callback_data == 'stop':
        update.callback_query.edit_message_text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ üòå')
        return ConversationHandler.END

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø—É—Ç—ã–≤–∞–Ω–∏—è callback-–æ–≤
    list_callback1 = ['haircut','hair', 'pedicure', 'manicure', 'face', 'back', 'more', 'nomore',
                      'stopit', 'nomore2', 'delete']
    while callback_data in list_callback1:
        callback(update=update, context=context)

    dict_point = {'haircut2':'–°—Ç—Ä–∏–∂–∫–∞', 'hair2':'–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', 'face2': '–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º',
                  'manicure2' : '–ú–∞–Ω–∏–∫—é—Ä', 'pedicure2' : '–ü–µ–¥–∏–∫—é—Ä'}

    rand = random.randint(1000, 9999)

    update.callback_query.edit_message_text(f'''
  *–í–∞—à –∑–∞–∫–∞–∑* üîñ: # {rand}
*–î–∞—Ç–∞* - {context.user_data[DATE][-2:]},
*–£—Å–ª—É–≥–∞* -  {dict_point[context.user_data[POINT]]},
*–í—Ä–µ–º—è* - {context.user_data[TIME]}:00

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ üíÅ‚Äç‚ôÄÔ∏è
''',
                                            reply_markup=markup_YN(),
                                            parse_mode=ParseMode.MARKDOWN)
    return END

def is_end(update:Update, context:CallbackContext):


    data_2 = update.callback_query.data

    chat = update.callback_query.from_user

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø—É—Ç—ã–≤–∞–Ω–∏—è callback-–æ–≤
    list_callback1 = ['haircut','hair', 'pedicure', 'manicure', 'face', 'back', 'more', 'nomore',
                      'stopit', 'nomore2', 'delete']
    while data_2 in list_callback1:
        callback(update=update, context=context)


    if data_2 == 'ok':

        text_order = str(update.effective_message.text)
        rand = text_order[15:19]
        # print(rand)


        #  –ù–ê–î–û –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        chat_id = update.callback_query.message.chat_id
        # print(chat_id)


        with sq.connect('client_orders.db') as con:
            values_text = f'{chat_id}, "{text_order[:-29]}", {rand}'
            # print(values_text)

            cur = con.cursor()

            cur.execute(f'INSERT INTO orders (chat_id, text, random) VALUES({values_text})')

        #–í–Ω–µ—Å—Ç–∏ UPDATE in googlesheets

        dict_time = {'08':'B','09':'C','10':'D','11':'E','12':'F','13':'G'}

        D = context.user_data[DATE][-2:]
        # print(D)
        T = context.user_data[TIME]
        # print(T)

        values = service.spreadsheets().values().batchUpdate(
            spreadsheetId=spreadsheets_id,
            body={
                'valueInputOption': 'USER_ENTERED',
                'data': [
                    {'range': f'{dict_time[T]}{int(D)+1}',
                     'majorDimension': 'COLUMNS',
                     'values': [['–Ω–µ—Ç']]},

                ]
            }
        ).execute()


      # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        update.effective_message.forward(
            chat_id='1790158717',
            )


        update.callback_query.edit_message_text(text='–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å ü§ó'
                                                     ' C–≤–æ–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /myorders',
                                                )

        return ConversationHandler.END

    elif data_2 == 'revoke':
        update.callback_query.edit_message_text('–ó–∞–∫–∞–∑ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω')
        return ConversationHandler.END
    else:
        update.callback_query.edit_message_text('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /sighup')
        return ConversationHandler.END

def cancel_han(update:Update, context:CallbackContext):
    update.message.reply_text(
        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /sighup'
    )
    return ConversationHandler.END




def main():
    updater = Updater(
        token='1932460705:AAGmuy7377SjrfKuner8vFt4PLbktHktzWA')



    conv_han = ConversationHandler(
        entry_points= [
            CommandHandler('sighup', start_conv)
        ],
        states= {
            POINT: [
                CallbackQueryHandler(date_han, pass_user_data=True)
            ],
            TIME: [
                CallbackQueryHandler(time_han, pass_user_data=True)
            ],
            FINAL_CHECK: [
                CallbackQueryHandler(final_check, pass_user_data=True)
            ],
            END: [
                CallbackQueryHandler(is_end, pass_user_data=True)
            ]
        },
        fallbacks= [
            CommandHandler('stop_register', cancel_han)
        ],


    )

    updater.dispatcher.add_handler(conv_han)

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('price', price_list))
    updater.dispatcher.add_handler(CommandHandler('myorders', my_orders))
    updater.dispatcher.add_handler(CommandHandler('help', help))

    updater.dispatcher.add_handler(MessageHandler(Filters.all, echo))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=callback))

    updater.start_polling()
    updater.idle()



if __name__ == '__main__':
    main()